@page "/Play"
@implements IDisposable;

@using FunFactor.Client.Components.Shared
@using FunFactor.Client.Components.Shared.Modals
@using FunFactor.Client.Models.Game

<PageTemplate>
    <HeaderContent>
        <div class="flex justify-between">
            <div>Game</div>
            <div>
                @if (!_started || _gameOver)
                {
                    <button class="btn btn-success" @onclick="StartNewGame">Start new Game</button>
                }
                else if (!_gameOver)
                {
                    @if (!_paused)
                    {
                        <button class="btn btn-primary" @onclick="OnPauseClick">Pause Game</button>
                    }
                    else
                    {
                        <button class="btn btn-success" @onclick="OnResumeClick">Resume Game</button>
                    }
                }
            </div>
        </div>
    </HeaderContent>
    <BodyContent>
        <div class="flex justify-center">

            <div class="w-72">

                <div class="flex w-full h-12 border-x-4 border-white">
                    <div class="grid grid-cols-7 gap-1">

                        @for (int c = 1; c <= MAX_COLUMNS; c++)
                        {
                            var piece = _pieces.FirstOrDefault(p => p.Position.Y == 0 && p.Position.X == c);
                            <div>
                                @if (piece != null)
                                {
                                    <button class="game-piece col-start-2" @onclick="(()=> PieceClicked(piece))">@piece.Value</button>
                                }
                            </div>
                        }


                    </div>
                </div>


                <div class="flex w-full h-96 rounded-b-xl border-4 border-t-0 border-gray-200 drop-shadow-xl">

                    <div class="grid grid-cols-7 gap-1">

                        @for (int r = 1; r <= MAX_ROWS; r++)
                        {
                            for (int c = 1; c <= MAX_COLUMNS; c++)
                            {
                                var piece = _pieces.FirstOrDefault(p => p.Position.Y == r && p.Position.X == c);

                                <div class="game-piece-container">

                                    @if (piece != null)
                                    {
                                        <button class="game-piece@(piece.IsSelected ? " selected" : string.Empty)" @onclick="(()=> PieceClicked(piece))">@piece.Value</button>
                                    }
                                </div>
                            }
                        }


                    </div>
                </div>
            </div>
        </div>
    </BodyContent>
</PageTemplate>

@if (_showGameOver)
{
    <ContentModal Show="@true" Title="Game Over!">
        <ChildContent>
            <div mb-6>
                @*<Alert Type="@AlertType.Info">*@
                @if (_score > 0)
                {
                    <p>Well done, your score this time was <span class="font-bold">@_score</span></p>
                }
                else
                {
                    <p>Bad luck, you didn't score anything this time.  Click 'Play Again' to have another go.</p>
                }
                @*</Alert>*@
            </div>
        </ChildContent>
        <Buttons>
            <div class="flex flex-row justify-between">
                <button type="button" class="btn btn-primary" @onclick="@(() => OnGameOverModalClose(false))">OK</button>
                <button type="button" class="btn btn-success" @onclick="@(() => OnGameOverModalClose(true))">Play Again</button>
            </div>

        </Buttons>
    </ContentModal>
}


@code {
    private const int REDRAW_INTERVAL = 100;
    private const int MAX_COLUMNS = 7;
    private const int MAX_ROWS = 9;

    private List<GamePiece> _pieces { get; set; } = new List<GamePiece>();
    private IEnumerable<GamePiece> _selectedPieces => _pieces.Where(p => p.IsSelected);

    private Timer? _timer;
    private Random _random = new Random();

    private bool _started;
    private bool _paused;
    private bool _gameOver;
    private bool _showGameOver;

    private int _score;

    // TODO: vary these to make the game harder
    private int _currentRunRedrawCount;
    private int _moveRedrawCount = 10;
    private int _maxTable = 10;
    private int _matchingScoreIncrement = 10;


    private void StartNewGame()
    {
        _started = true;
        _gameOver = false;
        _score = 0;
        _pieces = new List<GamePiece>();

        RunGame();
    }

    private void OnResumeClick()
    {
        RunGame();
        _paused = false;
    }

    private void OnPauseClick()
    {

        StopGame();
        _paused = true;
    }


    private void RunGame()
    {
        _currentRunRedrawCount = 0;
        _timer = new Timer(async _ =>
         {
             await InvokeAsync(RedrawGameAsync);
         }, null, 0, REDRAW_INTERVAL);
    }


    private void StopGame()
    {
        _timer?.Dispose();
        _timer = null;
    }

    private void SetGameOver()
    {
        _gameOver = true;
        _showGameOver = true;
        StopGame();
    }

    private async Task RedrawGameAsync()
    {
        if (_gameOver)
            return;

        _currentRunRedrawCount++;

        // time to move
        if (_currentRunRedrawCount % _moveRedrawCount == 0)
        {
            @foreach (var piece in _pieces.OrderByDescending(p => p.Position.Y))
            {
                if (piece.Position.Y < MAX_ROWS)
                {
                    var nextPostion = new Position { X = piece.Position.X, Y = piece.Position.Y + 1 };

                    if (_pieces.Any(p => p.Position.Matches(nextPostion)))
                        continue;

                    piece.Position = nextPostion;
                }
            }

            if (ContainerIsFull())
            {
                SetGameOver();
            }
            else
            {
                var newPiece = new GamePiece { Value = GetNextFactor(), Position = new Position { X = _random.Next(1, MAX_COLUMNS + 1) } };
                _pieces.Add(newPiece);
            }

        }

        StateHasChanged();
    }

    private bool ContainerIsFull()
    {
        @for (int c = 1; c <= MAX_COLUMNS; c++)
        {
            if (ColumnIsFull(c))
                return true;
        }

        return false;
    }

    private bool ColumnIsFull(int column)
    {

        for (int r = 1; r <= MAX_ROWS; r++)
        {
            var currentPosition = new Position { X = column, Y = r };
            if (!_pieces.Any(p => p.Position.Matches(currentPosition)))
            {
                return false;
            }
        }

        return true;
    }

    private void PieceClicked(GamePiece selectedPiece)
    {
        if (_gameOver) return;

        if (!selectedPiece.IsSelected && _selectedPieces.Count() > 2)
        {
            //_selectedPieces.First().IsSelected = false;
            ClearSelectedPieces();
        }

        selectedPiece.IsSelected = !selectedPiece.IsSelected;

        if (_selectedPieces.Count() > 2)
        {
            var selectedValues = _selectedPieces.Select(p => p.Value).OrderBy(v => v).ToList();

            if (selectedValues[0] * selectedValues[1] == selectedValues[2])
            {
                foreach (var piece in _selectedPieces.ToList())
                {
                    _pieces.Remove(piece);
                }

                _score += _matchingScoreIncrement;
            }

            else
            {
                ClearSelectedPieces();
            }
        }


    }

    private void ClearSelectedPieces()
    {
        foreach (var piece in _selectedPieces.ToList())
        {
            piece.IsSelected = false;
        }
    }

    private int GetNextFactor()
    {

        var nextFactor = _random.Next(2, _maxTable + 1);
        if (_random.Next(1, 4) % 3 == 0)
        {
            nextFactor *= _random.Next(2, _maxTable + 1);
        }

        return nextFactor;
    }



    private void OnGameOverModalClose(bool startNewGame)
    {
        _showGameOver = false;

        if (startNewGame)
        {
            StartNewGame();
        }
    }


    public void Dispose()
    {
        _timer?.Dispose();
    }
}
