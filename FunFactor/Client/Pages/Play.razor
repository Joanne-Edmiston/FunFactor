@page "/Play"
@implements IDisposable;

@using FunFactor.Client.Models.Game

<PageTemplate>
    <HeaderContent>
        <div class="flex justify-between">
            <div>Game</div>
            <div>
                @if (!_gameOver)
                {
                    if (!_started)
                    {
                        <button class="btn btn-success" @onclick="OnStartClick">Start new Game</button>
                    }
                    else
                    {
                        @if (!_paused)
                        {
                            <button class="btn btn-primary" @onclick="OnPauseClick">Pause Game</button>
                        }
                        else
                        {
                            <button class="btn btn-success" @onclick="OnResumeClick">Resume Game</button>
                        }
                    }
                }
            </div>
        </div>
    </HeaderContent>
    <BodyContent>
        <div class="flex justify-center">

            <div class="w-72">

                <div class="flex w-full h-12 border-x-4 border-white">
                    <div class="grid grid-cols-7 gap-1">

                        @for (int c = 1; c <= MAX_COLUMNS; c++)
                        {
                            var piece = _pieces.FirstOrDefault(p => p.Position.Y == 0 && p.Position.X == c);
                            <div>
                                @if (piece != null)
                                {
                                    <button class="game-piece col-start-2" @onclick="(()=> PieceClicked(piece))">@piece.Value</button>
                                }
                            </div>
                        }


                    </div>
                </div>


                <div class="flex w-full h-96 rounded-b-xl border-4 border-t-0 border-gray-200 drop-shadow-xl">

                    <div class="grid grid-cols-7 gap-1">

                        @for (int r = 1; r <= MAX_ROWS; r++)
                        {
                            for (int c = 1; c <= MAX_COLUMNS; c++)
                            {
                                var piece = _pieces.FirstOrDefault(p => p.Position.Y == r && p.Position.X == c);

                                <div>

                                    @if (piece != null)
                                    {
                                        <button class="game-piece col-start-2" @onclick="(()=> PieceClicked(piece))">@piece.Value</button>
                                    }
                                </div>
                            }
                        }


                    </div>
                </div>
            </div>
        </div>
    </BodyContent>
</PageTemplate>

@code {
    private const int REDRAW_INTERVAL = 100;
    private const int MAX_COLUMNS = 7;
    private const int MAX_ROWS = 9;

    private List<GamePiece> _pieces { get; set; } = new List<GamePiece>();
    private Timer? _timer;
    private bool _started;
    private bool _paused;
    private bool _gameOver;
    private int _currentRunRedrawCount;
    private int _moveRedrawCount = 10;

    // TODO: remove this - it's just for testing
    private int _tempCounter = 0;

    private async Task OnStartClick()
    {
        _started = true;
        RunGame();
    }

    private async Task OnResumeClick()
    {
        RunGame();
        _paused = false;
    }

    private async Task OnPauseClick()
    {

        StopGame();
        _paused = true;
    }


    private void RunGame()
    {
        _currentRunRedrawCount = 0;
        _timer = new Timer(async _ =>
         {
             await InvokeAsync(RedrawGameAsync);
         }, null, 0, REDRAW_INTERVAL);
    }


    private void StopGame()
    {
        _timer?.Dispose();
        _timer = null;
    }

    private async Task RedrawGameAsync()
    {
        if (_gameOver)
            return;

        _currentRunRedrawCount++;

        // time to move
        if (_currentRunRedrawCount % _moveRedrawCount == 0)
        {
            @foreach (var piece in _pieces.OrderByDescending(p => p.Position.Y))
            {
                if (piece.Position.Y < MAX_ROWS)
                {
                    var nextPostion = new Position { X = piece.Position.X, Y = piece.Position.Y + 1 };

                    if (_pieces.Any(p => p.Position.Matches(nextPostion)))
                        continue;

                    piece.Position = nextPostion;
                }
            }

            _tempCounter++;
            var newPiece = new GamePiece { Value = _tempCounter, Position = new Position { X = 1 } };

            if (_pieces.Any(p => p.Position.Matches(newPiece.Position)))
            {
                _gameOver = true;
                StopGame();
            }
            else
            {
                _pieces.Add(newPiece);
            }

        }

        StateHasChanged();
    }

    private void PieceClicked(GamePiece selectedPiece)
    {
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
